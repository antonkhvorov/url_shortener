// Code generated by protoc-gen-go. DO NOT EDIT.
// source: url_shortener.proto

/*
Package url_shortener is a generated protocol buffer package.

It is generated from these files:
	url_shortener.proto

It has these top-level messages:
	Url
	Response
	ShortUrl
	TextWithUrls
	TextWithShortUrls
*/
package url_shortener

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Url struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *Url) Reset()                    { *m = Url{} }
func (m *Url) String() string            { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()               {}
func (*Url) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Url) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Response struct {
	OperationResponse string `protobuf:"bytes,2,opt,name=operationResponse" json:"operationResponse,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetOperationResponse() string {
	if m != nil {
		return m.OperationResponse
	}
	return ""
}

type ShortUrl struct {
	ShortUrl string `protobuf:"bytes,3,opt,name=shortUrl" json:"shortUrl,omitempty"`
}

func (m *ShortUrl) Reset()                    { *m = ShortUrl{} }
func (m *ShortUrl) String() string            { return proto.CompactTextString(m) }
func (*ShortUrl) ProtoMessage()               {}
func (*ShortUrl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ShortUrl) GetShortUrl() string {
	if m != nil {
		return m.ShortUrl
	}
	return ""
}

type TextWithUrls struct {
	Text string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (m *TextWithUrls) Reset()                    { *m = TextWithUrls{} }
func (m *TextWithUrls) String() string            { return proto.CompactTextString(m) }
func (*TextWithUrls) ProtoMessage()               {}
func (*TextWithUrls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TextWithUrls) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TextWithShortUrls struct {
	TextWithShort string `protobuf:"bytes,5,opt,name=textWithShort" json:"textWithShort,omitempty"`
}

func (m *TextWithShortUrls) Reset()                    { *m = TextWithShortUrls{} }
func (m *TextWithShortUrls) String() string            { return proto.CompactTextString(m) }
func (*TextWithShortUrls) ProtoMessage()               {}
func (*TextWithShortUrls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TextWithShortUrls) GetTextWithShort() string {
	if m != nil {
		return m.TextWithShort
	}
	return ""
}

func init() {
	proto.RegisterType((*Url)(nil), "Url")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*ShortUrl)(nil), "ShortUrl")
	proto.RegisterType((*TextWithUrls)(nil), "TextWithUrls")
	proto.RegisterType((*TextWithShortUrls)(nil), "TextWithShortUrls")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UrlShortener service

type UrlShortenerClient interface {
	GenerateShortUrl(ctx context.Context, in *Url, opts ...client.CallOption) (*Response, error)
	AcquireShortUrl(ctx context.Context, in *Url, opts ...client.CallOption) (*ShortUrl, error)
	ReplaceAllUrlsByShortUrl(ctx context.Context, in *TextWithUrls, opts ...client.CallOption) (*TextWithShortUrls, error)
}

type urlShortenerClient struct {
	c           client.Client
	serviceName string
}

func NewUrlShortenerClient(serviceName string, c client.Client) UrlShortenerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "urlshortener"
	}
	return &urlShortenerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *urlShortenerClient) GenerateShortUrl(ctx context.Context, in *Url, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UrlShortener.GenerateShortUrl", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) AcquireShortUrl(ctx context.Context, in *Url, opts ...client.CallOption) (*ShortUrl, error) {
	req := c.c.NewRequest(c.serviceName, "UrlShortener.AcquireShortUrl", in)
	out := new(ShortUrl)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) ReplaceAllUrlsByShortUrl(ctx context.Context, in *TextWithUrls, opts ...client.CallOption) (*TextWithShortUrls, error) {
	req := c.c.NewRequest(c.serviceName, "UrlShortener.ReplaceAllUrlsByShortUrl", in)
	out := new(TextWithShortUrls)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UrlShortener service

type UrlShortenerHandler interface {
	GenerateShortUrl(context.Context, *Url, *Response) error
	AcquireShortUrl(context.Context, *Url, *ShortUrl) error
	ReplaceAllUrlsByShortUrl(context.Context, *TextWithUrls, *TextWithShortUrls) error
}

func RegisterUrlShortenerHandler(s server.Server, hdlr UrlShortenerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UrlShortener{hdlr}, opts...))
}

type UrlShortener struct {
	UrlShortenerHandler
}

func (h *UrlShortener) GenerateShortUrl(ctx context.Context, in *Url, out *Response) error {
	return h.UrlShortenerHandler.GenerateShortUrl(ctx, in, out)
}

func (h *UrlShortener) AcquireShortUrl(ctx context.Context, in *Url, out *ShortUrl) error {
	return h.UrlShortenerHandler.AcquireShortUrl(ctx, in, out)
}

func (h *UrlShortener) ReplaceAllUrlsByShortUrl(ctx context.Context, in *TextWithUrls, out *TextWithShortUrls) error {
	return h.UrlShortenerHandler.ReplaceAllUrlsByShortUrl(ctx, in, out)
}

func init() { proto.RegisterFile("url_shortener.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x5b, 0x5b, 0xa5, 0x3b, 0xec, 0xe2, 0x6e, 0x3c, 0x18, 0x7a, 0x92, 0xb0, 0x8a, 0x07,
	0xc9, 0x41, 0x2f, 0x7a, 0x92, 0xf5, 0xe2, 0xbd, 0x6b, 0xf1, 0x28, 0x75, 0x19, 0xd8, 0x42, 0x68,
	0xea, 0x64, 0x0a, 0xeb, 0x7f, 0xf1, 0xc7, 0x4a, 0x82, 0x29, 0x2b, 0xbd, 0xbd, 0xbc, 0x7c, 0x33,
	0x79, 0x2f, 0x70, 0x31, 0x90, 0xf9, 0x70, 0x7b, 0x4b, 0x8c, 0x1d, 0x92, 0xee, 0xc9, 0xb2, 0x55,
	0x97, 0x90, 0xd5, 0x64, 0xc4, 0x12, 0xb2, 0x81, 0x8c, 0x4c, 0xaf, 0xd2, 0xdb, 0x59, 0xe5, 0xa5,
	0x7a, 0x84, 0xa2, 0x42, 0xd7, 0xdb, 0xce, 0xa1, 0xb8, 0x83, 0x95, 0xed, 0x91, 0x1a, 0x6e, 0x6d,
	0x17, 0x4d, 0x79, 0x12, 0xd8, 0xe9, 0x85, 0xba, 0x81, 0x62, 0xeb, 0x5f, 0xf1, 0x7b, 0x4b, 0x28,
	0xdc, 0x9f, 0x96, 0x59, 0x18, 0x18, 0xcf, 0x4a, 0xc1, 0xfc, 0x0d, 0x0f, 0xfc, 0xde, 0xf2, 0xbe,
	0x26, 0xe3, 0x84, 0x80, 0x9c, 0xf1, 0xc0, 0x32, 0x0f, 0x5c, 0xd0, 0xea, 0x09, 0x56, 0x91, 0x89,
	0x3b, 0x9d, 0x58, 0xc3, 0x82, 0x8f, 0x4d, 0x79, 0x1a, 0x26, 0xfe, 0x9b, 0xf7, 0x3f, 0x29, 0xcc,
	0x6b, 0x32, 0xdb, 0x58, 0x58, 0x5c, 0xc3, 0xf2, 0xd5, 0x8b, 0x86, 0x71, 0xcc, 0x97, 0xeb, 0x9a,
	0x4c, 0x39, 0xd3, 0x63, 0xf8, 0x44, 0xac, 0xe1, 0x7c, 0xb3, 0xfb, 0x1a, 0x5a, 0x9a, 0x52, 0xd1,
	0x50, 0x89, 0x78, 0x06, 0x59, 0x61, 0x6f, 0x9a, 0x1d, 0x6e, 0x8c, 0xf1, 0xa9, 0x5e, 0xbe, 0x47,
	0x7c, 0xa1, 0x8f, 0x7b, 0x95, 0x42, 0x4f, 0x2a, 0xa8, 0xe4, 0xf3, 0x2c, 0xfc, 0xff, 0xc3, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xa2, 0x9c, 0xdb, 0x96, 0x01, 0x00, 0x00,
}
